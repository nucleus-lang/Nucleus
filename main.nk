# fn calculate_fib(n: i32): i32 {
# 	if compare.is_less_than_or_equals(n, 1) {
# 		return load n;
# 	};
#
# 	pure r1: i32 = n - 1;
# 	pure r2: i32 = n - 2;
#
# 	pure i: i32 = calculate_fib(r1);
# 	pure i2: i32 = calculate_fib(r2);
#
# 	return i + i2;
# }

# todo "Enhancement: Polish atomic functions:";
# todo "\tTry to find a way to make atomic functions recursive.";
# todo "\tIf not possible, add a recursion limit to them.";

todo "Add Array Safety between arguments.";

atom check_if_bigger_than(a: i32, b: i32): i32 {

	pure r: i32 = 0;

	if a > b { r += a; };

	if a < 30 {
		if a != 16 { r += 5; };
		r += 3;
	};

	return load r;
}

# extern print_content(content: Array<i8>): i32;

fn get_second_element_of_array(the_array: Array<i32>): i32
{
	var first_el: i32 = get_element(the_array, 1);
	return first_el;
}

fn main(): i32
{
	var message: Array<i8> = "Hello!\n";
	var another_message: Array<i8> = "I love Nucleus!\n";
	var third_message: Array<i8> = "The number i'm thinking of is: ";
	var end_line: Array<i8> = "\n";

	say(message);
	say(another_message);
	say(third_message); say_i8_number(30);
	say(end_line);

	return 0;
}